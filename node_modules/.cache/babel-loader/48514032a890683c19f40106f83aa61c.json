{"ast":null,"code":"import _classCallCheck from \"/Users/cj/Youtube/tv-series/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cj/Youtube/tv-series/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cj/Youtube/tv-series/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cj/Youtube/tv-series/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cj/Youtube/tv-series/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cj/Youtube/tv-series/src/containers/series/index.js\";\nimport React, { Component } from 'react';\nimport SeriesList from '../../components/SeriesList';\nimport loader from '../../components/Loader';\n\nvar Series =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Series, _Component);\n\n  function Series() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Series);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Series)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      series: [],\n      seriesName: '',\n      isFetching: false\n    };\n\n    _this.onSeriesInputChange = function (e) {\n      _this.setState({\n        seriesName: e.target.value,\n        isFetching: true\n      });\n\n      fetch(\"http://api.tvmaze.com/search/shows?q=\".concat(e.target.value)).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        return _this.setState({\n          series: json,\n          isFetching: false\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Series, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          series = _this$state.series,\n          seriesName = _this$state.seriesName,\n          isFetching = _this$state.isFetching;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        value: seriesName,\n        type: \"text\",\n        onChange: this.onSeriesInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })), !isFetching && series.length === 0 && seriesName.trim() === '' && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \" Please type something \"), !isFetching && series.length === 0 && seriesName.trim() !== '' && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \" No tv series found with this name \"), isFetching && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"loading ..\"), !isFetching && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(SeriesList, {\n        list: this.state.series,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Series;\n}(Component);\n\nexport default Series;","map":{"version":3,"sources":["/Users/cj/Youtube/tv-series/src/containers/series/index.js"],"names":["React","Component","SeriesList","loader","Series","state","series","seriesName","isFetching","onSeriesInputChange","e","setState","target","value","fetch","then","response","json","length","trim"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;;IACMC,M;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,MAAM,EAAC,EADH;AAEJC,MAAAA,UAAU,EAAE,EAFR;AAGJC,MAAAA,UAAU,EAAE;AAHR,K;;UAMZC,mB,GAAsB,UAAAC,CAAC,EAAI;AACtB,YAAKC,QAAL,CAAc;AAAEJ,QAAAA,UAAU,EAACG,CAAC,CAACE,MAAF,CAASC,KAAtB;AAA6BL,QAAAA,UAAU,EAAE;AAAzC,OAAd;;AACAM,MAAAA,KAAK,gDAAyCJ,CAAC,CAACE,MAAF,CAASC,KAAlD,EAAL,CAAgEE,IAAhE,CAAsE,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OAA9E,EACAF,IADA,CACK,UAAAE,IAAI;AAAA,eAAI,MAAKN,QAAL,CAAc;AAAEL,UAAAA,MAAM,EAACW,IAAT;AAAeT,UAAAA,UAAU,EAAC;AAA1B,SAAd,CAAJ;AAAA,OADT;AAGH,K;;;;;;;6BACU;AAAA,wBACmC,KAAKH,KADxC;AAAA,UACGC,MADH,eACGA,MADH;AAAA,UACUC,UADV,eACUA,UADV;AAAA,UACqBC,UADrB,eACqBA,UADrB;AAEJ,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,KAAK,EAAED,UAAd;AAA0B,QAAA,IAAI,EAAE,MAAhC;AAAuC,QAAA,QAAQ,EAAG,KAAKE,mBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADH,EAKK,CAACD,UAAD,IAAeF,MAAM,CAACY,MAAP,KAAiB,CAAhC,IAAqCX,UAAU,CAACY,IAAX,OAAsB,EAA3D,IAAiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCALtE,EAQK,CAACX,UAAD,IAAeF,MAAM,CAACY,MAAP,KAAkB,CAAjC,IAAsCX,UAAU,CAACY,IAAX,OAAsB,EAA5D,IAAmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CARxE,EAWOX,UAAU,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAXrB,EAcO,CAACA,UAAD,IAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAG,oBAAC,UAAD;AAAY,QAAA,IAAI,EAAE,KAAKH,KAAL,CAAWC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,CAdtB,CADJ;AAmBH;;;;EAlCgBL,S;;AAqCrB,eAAeG,MAAf","sourcesContent":["import React, {Component } from 'react';\nimport SeriesList from '../../components/SeriesList';\nimport loader from '../../components/Loader';\nclass Series extends Component{\n    state = {\n        series:[],\n        seriesName: '',\n        isFetching: false\n    }\n\nonSeriesInputChange = e => {\n     this.setState({ seriesName:e.target.value, isFetching: true});\n     fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`).then((response => response.json()) )\n    .then(json => this.setState({ series:json, isFetching:false}));\n     \n }\n    render(){\n        const {series,seriesName,isFetching} = this.state;\n        return( \n            <div>\n               <div>\n                 <input value={seriesName} type= \"text\" onChange= {this.onSeriesInputChange} />\n               </div>\n               {\n                 !isFetching && series.length ===0 && seriesName.trim() === '' && <p> Please type something </p>\n               }\n               {\n                 !isFetching && series.length === 0 && seriesName.trim() !== '' &&  <p> No tv series found with this name </p>\n               }\n               {\n                   isFetching && <p>loading ..</p>\n               }\n               {\n                   !isFetching && <p><SeriesList list={this.state.series} /></p>\n               }\n            </div>\n        )\n    }\n}\n\nexport default Series;"]},"metadata":{},"sourceType":"module"}